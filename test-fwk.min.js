class TestFramework{tests=[];describe(e,o){console.log(`\n${e}`),o()}test(e,o){this.tests.push({name:e,callback:o})}expect(e,o=this.tests){return{toBe(r){e===r?console.log(`✔️  ${o[o.length-1].name}`):(console.error(`❌  ${o[o.length-1].name}`),console.error(`   Expected: ${r}`),console.error(`   Received: ${e}`))},toEqual(r){JSON.stringify(e)===JSON.stringify(r)?console.log(`✔️  ${o[o.length-1].name}`):(console.error(`❌  ${o[o.length-1].name}`),console.error(`   Expected: ${JSON.stringify(r)}`),console.error(`   Received: ${JSON.stringify(e)}`))},toThrow(r){try{e(),console.error(`❌  ${o[o.length-1].name}`),console.error(`   Expected: ${r}`),console.error("   Received: No error thrown")}catch(e){e.message===r?console.log(`✔️  ${o[o.length-1].name}`):(console.error(`❌  ${o[o.length-1].name}`),console.error(`   Expected: ${r}`),console.error(`   Received: ${e.message}`))}},toBeTruthy(){e?console.log(`✔️  ${o[o.length-1].name}`):(console.error(`❌  ${o[o.length-1].name}`),console.error("   Expected: truthy"),console.error(`   Received: ${e}`))},toBeFalsy(){e?(console.error(`❌  ${o[o.length-1].name}`),console.error("   Expected: falsy"),console.error(`   Received: ${e}`)):console.log(`✔️  ${o[o.length-1].name}`)},toBeGreaterThan(r){e>r?console.log(`✔️  ${o[o.length-1].name}`):(console.error(`❌  ${o[o.length-1].name}`),console.error(`   Expected: greater than ${r}`),console.error(`   Received: ${e}`))},toBeLessThan(r){e<r?console.log(`✔️  ${o[o.length-1].name}`):(console.error(`❌  ${o[o.length-1].name}`),console.error(`   Expected: less than ${r}`),console.error(`   Received: ${e}`))},toBeInstanceOf(r){e instanceof r?console.log(`✔️  ${o[o.length-1].name}`):(console.error(`❌  ${o[o.length-1].name}`),console.error(`   Expected: instance of ${r.name}`),console.error(`   Received: ${e.constructor.name}`))},toMatch(r){e.match(r)?console.log(`✔️  ${o[o.length-1].name}`):(console.error(`❌  ${o[o.length-1].name}`),console.error(`   Expected: match ${r}`),console.error(`   Received: ${e}`))},toContain(r){Array.isArray(e)&&e.includes(r)?console.log(`✔️  ${o[o.length-1].name}`):(console.error(`❌  ${o[o.length-1].name}`),console.error(`   Expected: contain ${r}`),console.error(`   Received: ${e}`))},toHaveLength(r){Array.isArray(e)&&e.length===r?console.log(`✔️  ${o[o.length-1].name}`):(console.error(`❌  ${o[o.length-1].name}`),console.error(`   Expected: length ${r}`),console.error(`   Received: ${e.length}`))},toBeCloseTo(r,n=2){Math.abs(e-r)<Math.pow(10,-n)?console.log(`✔️  ${o[o.length-1].name}`):(console.error(`❌  ${o[o.length-1].name}`),console.error(`   Expected: close to ${r}`),console.error(`   Received: ${e}`))},toBeDefined(){void 0!==e?console.log(`✔️  ${o[o.length-1].name}`):(console.error(`❌  ${o[o.length-1].name}`),console.error("   Expected: defined"),console.error("   Received: undefined"))},toBeUndefined(){void 0===e?console.log(`✔️  ${o[o.length-1].name}`):(console.error(`❌  ${o[o.length-1].name}`),console.error("   Expected: undefined"),console.error(`   Received: ${e}`))},toBeNull(){null===e?console.log(`✔️  ${o[o.length-1].name}`):(console.error(`❌  ${o[o.length-1].name}`),console.error("   Expected: null"),console.error(`   Received: ${e}`))},toBeNaN(){Number.isNaN(e)?console.log(`✔️  ${o[o.length-1].name}`):(console.error(`❌  ${o[o.length-1].name}`),console.error("   Expected: NaN"),console.error(`   Received: ${e}`))},notToBe(r){e!==r?console.log(`✔️  ${o[o.length-1].name}`):(console.error(`❌  ${o[o.length-1].name}`),console.error(`   Expected: not ${r}`),console.error(`   Received: ${e}`))}}}run(){this.tests.forEach((({callback:e})=>{try{e()}catch(e){console.error(`❌  Error: ${e.message}`)}}))}}