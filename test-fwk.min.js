class TestFramework{tests=[];describe(e,t){console.log(`\n${e}`),t()}test(e,t){this.tests.push({name:e,callback:t})}expect(e){return{toBe(t){e===t?console.log(`✔️  ${this.tests[this.tests.length-1].name}`):(console.error(`❌  ${this.tests[this.tests.length-1].name}`),console.error(`   Expected: ${t}`),console.error(`   Received: ${e}`))},toEqual(t){JSON.stringify(e)===JSON.stringify(t)?console.log(`✔️  ${this.tests[this.tests.length-1].name}`):(console.error(`❌  ${this.tests[this.tests.length-1].name}`),console.error(`   Expected: ${JSON.stringify(t)}`),console.error(`   Received: ${JSON.stringify(e)}`))},toThrow(t){try{e(),console.error(`❌  ${this.tests[this.tests.length-1].name}`),console.error(`   Expected: ${t}`),console.error("   Received: No error thrown")}catch(e){e.message===t?console.log(`✔️  ${this.tests[this.tests.length-1].name}`):(console.error(`❌  ${this.tests[this.tests.length-1].name}`),console.error(`   Expected: ${t}`),console.error(`   Received: ${e.message}`))}},toBeTruthy(){e?console.log(`✔️  ${this.tests[this.tests.length-1].name}`):(console.error(`❌  ${this.tests[this.tests.length-1].name}`),console.error("   Expected: truthy"),console.error(`   Received: ${e}`))},toBeFalsy(){e?(console.error(`❌  ${this.tests[this.tests.length-1].name}`),console.error("   Expected: falsy"),console.error(`   Received: ${e}`)):console.log(`✔️  ${this.tests[this.tests.length-1].name}`)},toBeGreaterThan(t){e>t?console.log(`✔️  ${this.tests[this.tests.length-1].name}`):(console.error(`❌  ${this.tests[this.tests.length-1].name}`),console.error(`   Expected: greater than ${t}`),console.error(`   Received: ${e}`))},toBeLessThan(t){e<t?console.log(`✔️  ${this.tests[this.tests.length-1].name}`):(console.error(`❌  ${this.tests[this.tests.length-1].name}`),console.error(`   Expected: less than ${t}`),console.error(`   Received: ${e}`))},toBeInstanceOf(t){e instanceof t?console.log(`✔️  ${this.tests[this.tests.length-1].name}`):(console.error(`❌  ${this.tests[this.tests.length-1].name}`),console.error(`   Expected: instance of ${t.name}`),console.error(`   Received: ${e.constructor.name}`))},toMatch(t){e.match(t)?console.log(`✔️  ${this.tests[this.tests.length-1].name}`):(console.error(`❌  ${this.tests[this.tests.length-1].name}`),console.error(`   Expected: match ${t}`),console.error(`   Received: ${e}`))},toContain(t){Array.isArray(e)&&e.includes(t)?console.log(`✔️  ${this.tests[this.tests.length-1].name}`):(console.error(`❌  ${this.tests[this.tests.length-1].name}`),console.error(`   Expected: contain ${t}`),console.error(`   Received: ${e}`))},toHaveLength(t){Array.isArray(e)&&e.length===t?console.log(`✔️  ${this.tests[this.tests.length-1].name}`):(console.error(`❌  ${this.tests[this.tests.length-1].name}`),console.error(`   Expected: length ${t}`),console.error(`   Received: ${e.length}`))},toBeCloseTo(t,s=2){Math.abs(e-t)<Math.pow(10,-s)?console.log(`✔️  ${this.tests[this.tests.length-1].name}`):(console.error(`❌  ${this.tests[this.tests.length-1].name}`),console.error(`   Expected: close to ${t}`),console.error(`   Received: ${e}`))},toBeDefined(){void 0!==e?console.log(`✔️  ${this.tests[this.tests.length-1].name}`):(console.error(`❌  ${this.tests[this.tests.length-1].name}`),console.error("   Expected: defined"),console.error("   Received: undefined"))},toBeUndefined(){void 0===e?console.log(`✔️  ${this.tests[this.tests.length-1].name}`):(console.error(`❌  ${this.tests[this.tests.length-1].name}`),console.error("   Expected: undefined"),console.error(`   Received: ${e}`))},toBeNull(){null===e?console.log(`✔️  ${this.tests[this.tests.length-1].name}`):(console.error(`❌  ${this.tests[this.tests.length-1].name}`),console.error("   Expected: null"),console.error(`   Received: ${e}`))},toBeNaN(){Number.isNaN(e)?console.log(`✔️  ${this.tests[this.tests.length-1].name}`):(console.error(`❌  ${this.tests[this.tests.length-1].name}`),console.error("   Expected: NaN"),console.error(`   Received: ${e}`))},notToBe(t){e!==t?console.log(`✔️  ${this.tests[this.tests.length-1].name}`):(console.error(`❌  ${this.tests[this.tests.length-1].name}`),console.error(`   Expected: not ${t}`),console.error(`   Received: ${e}`))}}}run(){this.tests.forEach((({callback:e})=>{try{e()}catch(e){console.error(`❌  Error: ${e.message}`)}}))}}